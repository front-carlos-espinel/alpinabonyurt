/** MIXINS **/
@use '../base/config' as c;

// MEDIAQUERIES
@mixin mq($media: mob, $type: max){
	@if type-of($media) == number {
		@if unitless($media) {
			@media only screen and (#{$type}-width: $media + px){
				@content;
			}
		}
	} @else {
		@if type-of(map-get($mediaqueries, $media)) == number {
			@media only screen and (#{$type}-width: map-get($mediaqueries, $media) + px){
				@content;
			}
		} @else if type-of(map-get($mediaqueries, $media)) == string {
			@media #{map-get($mediaqueries, $media)}{
				@content;
			}
		}
	}
}


// FLEXBOX
@mixin flex( $option: false, $jc: center, $ai: center, $ac: center, $fw: wrap, $d: flex, $fd: row ) {
	display: $d;
	flex-flow: $fd $fw;
	@if $option == centerY {
		justify-content: flex-start;
		align-items: center;
		align-content: center;
	} @else if $option == centerX {
		justify-content: center;
		align-items: flex-start;
		align-content: flex-start;
	} @else if $option == noCenter {
		justify-content: flex-start;
		align-items: flex-start;
		align-content: flex-start;
	} @else {
		justify-content: $jc;
		align-items: $ai;
		align-content: $ac;
	}
}


// SQUARE
@mixin square($size: 0) {
	$newWidth: 0;
	$newHeight: 0;

	@if( $size == viewport ) {
		$newWidth: 100vw;
		$newHeight: 100vh;
	} @else if( unitless($size) ) {
		$newWidth: $size + px;
		$newHeight: $size + px;
	} @else {
		$newWidth: $size;
		$newHeight: $size;
	}

	min-width: $newWidth;
	width: $newWidth;
	max-width: $newWidth;
	min-height: $newHeight;
	height: $newHeight;
	max-height: $newHeight;
}


// CIRCLE
@mixin circle($size) {
	@include square($size);
	border-radius: 50%;
	overflow: hidden;
}


// ASPECT RATIO
@mixin aspectRatio($width: 16, $height: 9) {
	@extend %width100;
    position: relative;
	&::before {
		@extend %pseudoEl;
		padding-top: ($height / $width) * 100%;
	}
	> iframe {
		@extend %width100;
		height: 100%;
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
	}
}


// TRANSITIONS
@mixin transition($prop: all, $time: .3, $timing: ease){
	transition: $prop $time + s $timing;
	@content;
}


// PLACEHOLDER STYLES
@mixin optional-at-root($sel) {
	@at-root #{if(not &, $sel, selector-append(&, $sel))} {
		@content;
	}
}

@mixin placeholder {
	@include optional-at-root('::-webkit-input-placeholder') {
		@content;
	}
	@include optional-at-root(':-moz-placeholder') {
		@content;
	}
	@include optional-at-root('::-moz-placeholder') {
		@content;
	}
	@include optional-at-root(':-ms-input-placeholder') {
		@content;
	}
}


// Mixin Global Text
@mixin title {
  font: normal normal normal 40px/1 c.$fontP1;
  color: #125CF7;
}

@mixin titletwo {
  font: normal normal 500 33px/1 c.$fontP2;
  color: #9700fc;
}

@mixin titlethree {
  font: normal normal 700 33px/1 c.$fontP2;
  color: c.$colorP3;
}

@mixin descriptionPrimary {
  font: normal normal 400 14px/18px c.$fontP1;
  color: c.$colorP6;
}

@mixin descriptionSecond {
  font: normal normal 400 16px/24px c.$fontP1;
  color: c.$white;
}

@mixin description {
  font: normal normal 500 33px/1 c.$fontP2;
  color: #9700FC;
}

@mixin descriptiontwo {
  font: normal normal 400 24px/30px c.$fontP2;
  color: #9700FC;
}
